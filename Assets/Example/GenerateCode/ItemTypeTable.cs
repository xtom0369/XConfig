//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System;
using XConfig;

public partial class Config
{
	[BindConfigPath("item_type")]
	public ItemTypeTable itemTypeTable = new ItemTypeTable();
}
public partial class ItemTypeTable : XTable
{
	public List<ItemTypeRow> rows { get { return _tableRows; }}
	List<ItemTypeRow> _tableRows;
	override public void ReadFromBytes(BytesBuffer buffer)
	{
		if (_tableRows == null)
		{
			_tableRows = new List<ItemTypeRow>();
			ushort rowCount = buffer.ReadUInt16();
			for (int i = 0; i < rowCount; i++)
			{
				ItemTypeRow row = new ItemTypeRow();
				row.ReadFromBytes(buffer);
				_tableRows.Add(row);
			}
		}
		else
		{
			ushort rowCount = buffer.ReadUInt16();
			for (int i = 0; i < rowCount; i++)
				_tableRows[i].ReadFromBytes(buffer);
		}
	}
	Dictionary<int, ItemTypeRow> _intMajorKey2Row;
	override public void Init()
	{
		ItemTypeRow row = null;
		_intMajorKey2Row = new Dictionary<int, ItemTypeRow>();
		for (int i = 0; i < _tableRows.Count; i++)
		{
			row = _tableRows[i];
			int majorKey = row.Id;
			DebugUtil.Assert(!_intMajorKey2Row.ContainsKey(majorKey), "{0} 主键重复：{1}，请先按键盘【alt+r】导出配置试试！", name, majorKey);
			_intMajorKey2Row.Add(majorKey, row);
		}
	}
	virtual public ItemTypeRow GetValue(int majorKey, bool isAssert=true)
	{
		ItemTypeRow row;
		if (_intMajorKey2Row.TryGetValue(majorKey, out row))
			return row;
		if (isAssert)
			DebugUtil.Assert(row != null, "{0} 找不到指定主键为 {1} 的行，请先按键盘【alt+r】导出配置试试！", name, majorKey);
		return null;
	}
	virtual public bool TryGetValue(int majorKey, out ItemTypeRow row)
	{
		return _intMajorKey2Row.TryGetValue(majorKey, out row);
	}
	public bool ContainsKey(int majorKey)
	{
		return _intMajorKey2Row.ContainsKey(majorKey);
	}
	public void AddRow(ItemTypeRow row)
	{
		if (!_intMajorKey2Row.ContainsKey(row.Id))
		{
			_tableRows.Add(row);
			_intMajorKey2Row.Add(row.Id, row);
		}
	}
	override public void OnInit()
	{
		for (int i = 0; i < _tableRows.Count; i++)
			_tableRows[i].OnAfterInit();


		OnAfterInit();
	}
}
public partial class ItemTypeRow : XRow
{
	private int _Id;
	[ConfigMainKey]
	public int Id { get { return _Id; }}
	private string _IdName;
	public string IdName { get { return _IdName; }}
	private string _Name;
	public string Name { get { return _Name; }}
	private int _CreateType;
	public int CreateType { get { return _CreateType; }}
	private string _ClientExtArgs;
	public string ClientExtArgs { get { return _ClientExtArgs; }}
	private string _ServerExtArgs;
	public string ServerExtArgs { get { return _ServerExtArgs; }}
	private int _ProxyRemoveOrder;
	public int ProxyRemoveOrder { get { return _ProxyRemoveOrder; }}
	private bool _CanAdd;
	public bool CanAdd { get { return _CanAdd; }}
	private bool _CanRemove;
	public bool CanRemove { get { return _CanRemove; }}
	private bool _CanCheckCount;
	public bool CanCheckCount { get { return _CanCheckCount; }}
	private string _SmallIcon;
	public string SmallIcon { get { return _SmallIcon; }}
	private uint _WarehouseType;
	public uint WarehouseType { get { return _WarehouseType; }}
	private int _Order;
	public int Order { get { return _Order; }}
	private Vector2 _xy;
	public Vector2 xy { get { return _xy; }}
	private Vector3 _xy3;
	public Vector3 xy3 { get { return _xy3; }}
	private float _f1;
	public float f1 { get { return _f1; }}
	private Color _c1;
	public Color c1 { get { return _c1; }}
	private DateTime _t1;
	public DateTime t1 { get { return _t1; }}
	private FlagType _flag;
	public FlagType flag { get { return _flag; }}
	public override void ReadFromBytes(BytesBuffer buffer)
	{
		if (buffer.ReadByte() == 1) IntType.ReadFromBytes(buffer, out _Id);
		else _Id = 0;
		if (buffer.ReadByte() == 1) StringType.ReadFromBytes(buffer, out _IdName);
		else _IdName = string.Empty;
		if (buffer.ReadByte() == 1) StringType.ReadFromBytes(buffer, out _Name);
		else _Name = string.Empty;
		if (buffer.ReadByte() == 1) IntType.ReadFromBytes(buffer, out _CreateType);
		else _CreateType = 0;
		if (buffer.ReadByte() == 1) StringType.ReadFromBytes(buffer, out _ClientExtArgs);
		else _ClientExtArgs = string.Empty;
		if (buffer.ReadByte() == 1) StringType.ReadFromBytes(buffer, out _ServerExtArgs);
		else _ServerExtArgs = string.Empty;
		if (buffer.ReadByte() == 1) IntType.ReadFromBytes(buffer, out _ProxyRemoveOrder);
		else _ProxyRemoveOrder = 999;
		if (buffer.ReadByte() == 1) BoolType.ReadFromBytes(buffer, out _CanAdd);
		else _CanAdd = true;
		if (buffer.ReadByte() == 1) BoolType.ReadFromBytes(buffer, out _CanRemove);
		else _CanRemove = true;
		if (buffer.ReadByte() == 1) BoolType.ReadFromBytes(buffer, out _CanCheckCount);
		else _CanCheckCount = true;
		if (buffer.ReadByte() == 1) StringType.ReadFromBytes(buffer, out _SmallIcon);
		else _SmallIcon = string.Empty;
		if (buffer.ReadByte() == 1) UIntType.ReadFromBytes(buffer, out _WarehouseType);
		else _WarehouseType = 0;
		if (buffer.ReadByte() == 1) IntType.ReadFromBytes(buffer, out _Order);
		else _Order = 0;
		if (buffer.ReadByte() == 1) Vector2Type.ReadFromBytes(buffer, out _xy);
		else _xy = Vector2.zero;
		if (buffer.ReadByte() == 1) Vector3Type.ReadFromBytes(buffer, out _xy3);
		else _xy3 = Vector3.zero;
		if (buffer.ReadByte() == 1) FloatType.ReadFromBytes(buffer, out _f1);
		else _f1 = 0f;
		if (buffer.ReadByte() == 1) ColorType.ReadFromBytes(buffer, out _c1);
		else _c1 = Color.clear;
		if (buffer.ReadByte() == 1) DateTimeType.ReadFromBytes(buffer, out _t1);
		else _t1 = DateTime.MinValue;
		if (buffer.ReadByte() == 1) { EnumType.ReadFromBytes(buffer, out var value); _flag = (FlagType)value;}
		else _flag = FlagType.None;
		rowIndex = buffer.ReadInt32();
	}
}
