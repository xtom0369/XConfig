//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System;
using XConfig;

public partial class Config
{
	[BindConfigPath("master_equipment")]
	public MasterEquipmentTable masterEquipmentTable = new MasterEquipmentTable();
}
[BindConfigPath("master_equipment")]
public partial class MasterEquipmentTable : XTable
{
	public List<MasterEquipmentRow> rows { get { return _tableRows; }}
	List<MasterEquipmentRow> _tableRows;
	public override void ReadFromBytes(BytesBuffer buffer)
	{
		if (_tableRows == null)
		{
			_tableRows = new List<MasterEquipmentRow>();
			ushort rowCount = buffer.ReadUInt16();
			for (int i = 0; i < rowCount; i++)
			{
				MasterEquipmentRow row = new MasterEquipmentRow();
				row.ReadFromBytes(buffer);
				_tableRows.Add(row);
			}
		}
		else
		{
			ushort rowCount = buffer.ReadUInt16();
			for (int i = 0; i < rowCount; i++)
				_tableRows[i].ReadFromBytes(buffer);
		}
	}
	Dictionary<int, MasterEquipmentRow> _intMajorKey2Row;
	public override void Init()
	{
		MasterEquipmentRow row = null;
		_intMajorKey2Row = new Dictionary<int, MasterEquipmentRow>();
		for (int i = 0; i < _tableRows.Count; i++)
		{
			row = _tableRows[i];
			int majorKey = row.Id;
			DebugUtil.Assert(!_intMajorKey2Row.ContainsKey(majorKey), "{0} 主键重复：{1}，请先按键盘【alt+r】导出配置试试！", name, majorKey);
			_intMajorKey2Row.Add(majorKey, row);
		}
	}
	public virtual MasterEquipmentRow GetValue(int majorKey, bool isAssert=true)
	{
		MasterEquipmentRow row;
		if (_intMajorKey2Row.TryGetValue(majorKey, out row))
			return row;
		if (isAssert)
			DebugUtil.Assert(row != null, "{0} 找不到指定主键为 {1} 的行，请先按键盘【alt+r】导出配置试试！", name, majorKey);
		return null;
	}
	public virtual bool TryGetValue(int majorKey, out MasterEquipmentRow row)
	{
		return _intMajorKey2Row.TryGetValue(majorKey, out row);
	}
	public bool ContainsKey(int majorKey)
	{
		return _intMajorKey2Row.ContainsKey(majorKey);
	}
	public void AddRow(MasterEquipmentRow row)
	{
		if (!_intMajorKey2Row.ContainsKey(row.Id))
		{
			_tableRows.Add(row);
			_intMajorKey2Row.Add(row.Id, row);
		}
	}
	public override void OnInit()
	{
		for (int i = 0; i < _tableRows.Count; i++)
			_tableRows[i].OnAfterInit();


		OnAfterInit();
	}
}
[BindConfigPath("master_equipment")]
public partial class MasterEquipmentRow : XRow
{
	private int _Id;
	[ConfigMainKey]
	public int Id { get { return _Id; }}
	private int _ValueLevel;
	public int ValueLevel { get { return _ValueLevel; }}
	private int _UseLevel;
	public int UseLevel { get { return _UseLevel; }}
	private int _StrengthenId;
	public int StrengthenId { get { return _StrengthenId; }}
	private int _InitStrengthenLevel;
	public int InitStrengthenLevel { get { return _InitStrengthenLevel; }}
	private int _StrengthenLevelMax;
	public int StrengthenLevelMax { get { return _StrengthenLevelMax; }}
	private int _JewelCount;
	public int JewelCount { get { return _JewelCount; }}
	private List<int> _JewelQuality;
	private ReadOnlyCollection<int> _jewelQualityReadOnlyCache;
	public ReadOnlyCollection<int> JewelQuality { get { return _jewelQualityReadOnlyCache ?? (_jewelQualityReadOnlyCache = _JewelQuality.AsReadOnly()); } }
	private int _SellDropCount;
	public int SellDropCount { get { return _SellDropCount; }}
	[ConfigReference("UnlockItem")]
	private int _UnlockItemId;
	public int UnlockItemId { get { return _UnlockItemId; }}
	private ItemsRow _unlockItem;
	public ItemsRow UnlockItem
	{
		get
		{
			if (_UnlockItemId == 0) return null;
			return _unlockItem ?? (_unlockItem = Config.Inst.itemsTable.GetValue(UnlockItemId));
		}
	}
	private float _DurabilityCostRate;
	public float DurabilityCostRate { get { return _DurabilityCostRate; }}
	public override void ReadFromBytes(BytesBuffer buffer)
	{
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _Id = (int)value;}
		else _Id = 0;
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _ValueLevel = (int)value;}
		else _ValueLevel = 0;
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _UseLevel = (int)value;}
		else _UseLevel = 0;
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _StrengthenId = (int)value;}
		else _StrengthenId = 0;
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _InitStrengthenLevel = (int)value;}
		else _InitStrengthenLevel = 0;
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _StrengthenLevelMax = (int)value;}
		else _StrengthenLevelMax = 0;
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _JewelCount = (int)value;}
		else _JewelCount = 0;
		_jewelQualityReadOnlyCache = null;
		_JewelQuality = new List<int>();
		if (buffer.ReadByte() == 1)
		{
			byte itemCount = buffer.ReadByte();
			for (int i = 0; i < itemCount; i++) { IntType.ReadFromBytes(buffer, out Int32 value); _JewelQuality.Add((int)value); }
		}
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _SellDropCount = (int)value;}
		else _SellDropCount = 1;
		_unlockItem = null;
		if (buffer.ReadByte() == 1) { ReferenceType.ReadFromBytes(buffer, out Int32 value); _UnlockItemId = (int)value;}
		else _UnlockItemId = 0;
		if (buffer.ReadByte() == 1) { FloatType.ReadFromBytes(buffer, out Single value); _DurabilityCostRate = (float)value;}
		else _DurabilityCostRate = 0f;
		rowIndex = buffer.ReadInt32();
	}
}
