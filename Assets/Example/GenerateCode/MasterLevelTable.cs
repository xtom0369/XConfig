//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System;
using XConfig;

public partial class Config
{
	[BindConfigFileName("master_level")]
	public MasterLevelTable masterLevelTable = new MasterLevelTable();
}
[BindConfigFileName("master_level")]
public partial class MasterLevelTable : XTable<MasterLevelRow>
{
	public override void Init()
	{
		_mainKey2Row = new Dictionary<long, MasterLevelRow>();
		for (int i = 0; i < _rows.Count; i++)
		{
			var row = _rows[i];
			long mainKey = GetMainKey(row.Id, row.Level);
			DebugUtil.Assert(!_mainKey2Row.ContainsKey(mainKey), $"{name} 主键重复：{row.Id} {row.Level}");
			_mainKey2Row.Add(mainKey, row);
		}
	}
	public void AddRow(MasterLevelRow row)
	{
		long mainKey = GetMainKey(row.Id, row.Level);
		if (!_mainKey2Row.ContainsKey(mainKey))
		{
			_rows.Add(row);
			_mainKey2Row.Add(mainKey, row);
		}
	}
	public override void OnInit()
	{
		for (int i = 0; i < _rows.Count; i++)
			_rows[i].OnAfterInit();

		OnAfterInit();
	}
}
[BindConfigFileName("master_level")]
public partial class MasterLevelRow : XRow
{
	[ConfigMainKey]
	public int Id { get { return _id; }}
	int _id;
	[ConfigMainKey]
	public int Level { get { return _level; }}
	int _level;
	public int Exp { get { return _exp; }}
	int _exp;
	public override void ReadFromBytes(BytesBuffer buffer)
	{
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _id = (int)value;}
		else _id = 0;
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _level = (int)value;}
		else _level = 0;
		if (buffer.ReadByte() == 1) { IntType.ReadFromBytes(buffer, out Int32 value); _exp = (int)value;}
		else _exp = 0;
		rowIndex = buffer.ReadInt32();
	}
}
